
(deftype Dummy [path])

(add-ns sv (module "state-vect.toc"))

(add-ns const (git-dependency "https://github.com/Toccata-Lang/constraints.git"
                              "constraints.toc"
                              :sha "3435b1b"))
(add-ns ast (git-dependency "https://github.com/Toccata-Lang/ast.git"
                            "ast.toc"
                            :sha "ffd6095"))
(add-ns rdr (git-dependency "https://github.com/Toccata-Lang/reader.git"
                            "reader.toc"
                            :sha "6673103"))
(add-ns rd (git-dependency "https://github.com/Toccata-Lang/recursive-descent.git"
                           "recursive-descent.toc"
                           :sha "1c09660"))
(add-ns grmr (git-dependency "https://github.com/Toccata-Lang/grammar.git"
                             "grammar.toc"
                             :sha "1e280ff"))
(add-ns ev (git-dependency "https://github.com/Toccata-Lang/eval.git"
                           "eval.toc"
                           :sha "d861de8"))

(defn debug [& args]
  (map (wrap sv/zero-sv "") (fn [_]
                           (apply print-err args))))

(def top-level
  (grmr/recursive-rule "top-level"
                       (grmr/any rdr/read-main
                                 rdr/read-JS-callable
                                 rdr/read-inline
                                 rdr/read-def
                                 rdr/read-defprotocol
                                 rdr/read-defn
                                 rdr/read-extend-type
                                 rdr/read-deftype
                                 rdr/read-block-comment
                                 rdr/read-add-ns
                                 rdr/read-expr
                                 rdr/shebang
                                 rdr/bad-expr)))

(def analyze-forms
  (rd/parser (grmr/none-or-more
              (grmr/any
               ;; (grmr/apply-fn (fn [modules]
               ;;                  (map modules extract))
               ;;                (grmr/one-or-more
               ;;                 (grmr/apply-fn add-namespace
               ;;                                rdr/read-add-ns
               ;;                                (grmr/get-value 'root-directory)
               ;;                                (grmr/get-value 'project-directory))))
               top-level))))

(defprotocol TypeChecker
  (f [ast]))

(extend-type const/TypeConstraint
  TypeChecker
  (f [c1]
    (let [sym (extract (.sym c1))]
      (for [t-maps (sv/get-in-val ['types (.type-sym c1)] {})
            :let [c1 (.type-maps c1 t-maps)]
            c (for [c2 (sv/get-in-val ['subs sym] const/top-type)
                    :let [new-cs (either (const/compose-constraints (ast/file-name c1)
                                                                    (ast/line-number c1)
                                                                    c1 c2)
                                         (do
                                           (print-err 'boom)
                                           (abort)))]
                    _ (sv/assoc-in-val ['subs sym] new-cs)]
                new-cs)]
        c))))

(extend-type ast/definition-ast
  TypeChecker
  (f [ast]
    (let [[expr] (filter (.value-exprs ast) (partial instance? ast/CodeAST))]
      (flat-map (f expr)
                (partial sv/assoc-in-val ['syms (.sym ast)])))))

(extend-type ast/fn-ast
  TypeChecker
  (f [ast]
    (let [[arity] (.arities ast)]
      (f (.fn-sym arity (.fn-sym ast))))))

(defn chain
  ([] sv/zero-sv)
  ([mv] mv)
  ([mv & mvs]
   (sv/new-sv (fn [s]
                (flat-map (mv s)
                          (fn [[_ new-s]]
                            ((apply chain mvs) new-s)))))))

(extend-type ast/fn-arity-ast
  TypeChecker
  (f [ast]
    (wrap sv/zero-sv
          (fn [& param-syms]
            (let [param-map (reduce (zip-lists param-syms (.fixed (.params ast)))
                                    {}
                                    (fn [m [param var]]
                                      (assoc m param var)))]
              (for [subs (sv/get-val 'subs)
                    :let [before-subs (reduce (zip-lists param-syms (.fixed (.params ast)))
                                              subs
                                              (fn [m [param var]]
                                                (either (map (get m param)
                                                             (partial assoc m var))
                                                        m)))]
                    _ (sv/set-val 'subs before-subs)
                    r (apply chain (seq (map (.body ast) f)))
                    after-subs (sv/get-val 'subs)
                    :let [final-subs (reduce (zip-lists param-syms (.fixed (.params ast)))
                                             after-subs
                                             (fn [m [param var]]
                                               (either (map (get m var)
                                                            (partial assoc m param))
                                                       m)))]
                    _ (sv/set-val 'subs final-subs)]
                r))))))

(extend-type ast/call-ast
  TypeChecker
  (f [ast]
    (for [checker (sv/get-in-val ['syms (.call-target ast)])
          c (apply checker (seq (.args ast)))]
      c)))

(extend-type ast/or-ast
  TypeChecker
  (f [ast]
    (apply comp (seq (map (.clauses ast) f)))))

(def input-text "
(defn tf [x]
  (assert (instance? Integer x)))

(defn tg [y]
  (assert (instance? String y)))

(defn th [z]
   (tf z)
   (tg z))

(th 8)
")

(main [_]
  ;; (print-err 'comp (unify (const/TypeConstraint {1 #{}} (list [_FILE_ _LINE_]) 'SomeType (maybe 'x) "")
  ;;                         (const/TypeConstraint {2 #{}} (list [_FILE_ _LINE_]) 'AnotherType (maybe 'y) "")))
  (let [st [['_ {'types {'Integer {const/IntegerType #{}}
                          'String {const/SubStringType #{}
                                   const/StringBufferType #{}}}
                  'subs {}
                  'syms {}}]]]
    (for [asts (analyze-forms {'file-name 'test
                               'line-number 1
                               'project-directory ""
                               'root-directory ""}
                              input-text)]
      (map (reduce asts st
                   (fn [st ast]
                     (flat-map st (fn [[_ new-st]]
                                    ((f ast) new-st)))))
           print-err))))

;; map over param constraints replacing with more restrictive arg constraints
;; remove any arg constratints that are satisfied by new param constraints
;; concat remaining arg constraints with new param constraints
;; assoc constraints with param syms
;; ass result constraints with result sym

;; (defn f [arity-ast]
;;   (fn [subs]
;;     (let [[expr & exprs] (map (.body arity-ast) f)]
;;       (reduce exprs (expr subs) (fn [subs expr]
;;                                   (flat-map subs expr))))))
